resource SmokersProb()
const SMOKERS : int := 6 # number of smokers

const TOBAC_SMOKER : int := 1
const PAPER_SMOKER : int := 2
const MATCH_SMOKER : int := 3


# smoker_id, type, pack_ver
op agent_chan(int; int; int)
op smoker_reply[SMOKERS](int)
# tobacco, paper, matches, pack_ver
op smoker_chan[SMOKERS](int; int; int; int)

process Agent
	var items_on_table[3] : int
	
	var paper_smoker[SMOKERS / 3] : int
	var tobac_smoker[SMOKERS / 3] : int
	var match_smoker[SMOKERS / 3] : int
	
	var type_count[3] : int
	type_count[1] := int(SMOKERS / 3) + int((SMOKERS mod 3) != 0)
	type_count[2] := int(SMOKERS / 3) + int(((SMOKERS mod 3) =  2))
	type_count[3] := int(SMOKERS / 3)
	
	write(type_count[1])
	write(type_count[2])
	write(type_count[3])
	
	
	# Determins the current package version
	var cpack_ver : int
	
	items_on_table[1] := 0 # tobacco
	items_on_table[2] := 0 # paper
	items_on_table[3] := 0 # matches
	cpack_ver := 0
	
	# Must await until 
	# nap(100*SMOKERS)
	write("Starting Agent...")
	do true -> 
		# randomly select two items
		var first_item := int(random(1,4))
		items_on_table[first_item]++
    	write("Putting item ", first_item," on the table.") 
		var second_item := int(random(1,4))
		do items_on_table[second_item] != 0 ->
			second_item := int(random(1,4))
		od
		++items_on_table[second_item]
    	write("Putting item ", second_item," on the table.")
		
		# tell smokers what items are available
		fa i := 1 to SMOKERS ->
			send smoker_chan[i](items_on_table[1], items_on_table[2], items_on_table[3], cpack_ver)
		af	

		# wait until the contents are picked up 
		do items_on_table[1] + items_on_table[2] + items_on_table[3] > 0 ->
			var id : int
			var pver : int
			var s_type : int
			
			receive agent_chan(id, s_type, pver)
			
			var can_pick : int
			if s_type = PAPER_SMOKER ->
				can_pick := paper_smoker[id - s_type + 1]
			[] s_type = TOBAC_SMOKER ->
				can_pick := tobac_smoker[id - s_type + 1]
			[] else ->
				can_pick := match_smoker[id - s_type + 1]
			fi
			
			if pver = cpack_ver and can_pick = 1 ->
				write("Gave stuff to ", id)
				send smoker_reply[id](1)
				++cpack_ver
				
				if s_type = PAPER_SMOKER ->
					paper_smoker[id - s_type + 1] := 1
				[] s_type = TOBAC_SMOKER ->
					tobac_smoker[id - s_type + 1] := 1
				[] else ->
					match_smoker[id - s_type + 1] := 1
				fi
				
				# Check if we need to reset the array
				var s : int := 0
				fa i := 1 to type_count[s_type] ->
					if s_type = PAPER_SMOKER ->
						s := s + paper_smoker[i]
					[] s_type = TOBAC_SMOKER ->
						s := s + tobac_smoker[i]
					[] else ->
						s := s + match_smoker[i]
					fi
				af
				
				# If all of the same type have picked a package, then reset it.
				if s = type_count[s_type] ->
					fa i := 1 to type_count[s_type] ->
						if s_type = PAPER_SMOKER ->
							paper_smoker[i] := 0
						[] s_type = TOBAC_SMOKER ->
							tobac_smoker[i] := 0
						[] else ->
							match_smoker[i] := 0
						fi
					af
				fi
				
				items_on_table[1] := 0
				items_on_table[2] := 0
				items_on_table[3] := 0
			[] else ->
				write("Dis n00b tried to get stuff but sucked ", id)
				send smoker_reply[id](0)
			fi
		od
	od
end

process Smoker(i := 1 to SMOKERS)
	write("Starting Smoker-process nr.",i)
	var my_item : int := ((i-1) % 3) + 1
	do true -> 
		# wait until the items you need are on the table
		var pver : int
		var mess[3] : int
		receive smoker_chan[i](mess[1], mess[2], mess[3], pver)
		# check the things we need are available
		if mess[1] + 2*mess[2] + 3*mess[3] + my_item = 6 ->
			write("IMA WANNA PICKUP SHIT YO ",i)
			send agent_chan(i, my_item, pver)
			
			var accepted : int
			receive smoker_reply[i](accepted)
			
			if accepted = 1 ->
				# smoke
				write("Smoker nr.",i," started smoking.")
				nap(int(random(1000, 2000)))
			[] else ->
				write("Somebody stole my stuff y0 :(" , i)
			fi
		fi
	od
end

end SmokersProb
