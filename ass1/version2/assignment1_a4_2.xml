<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>//Insert declarations of global clocks, variables, constants and channels.
const int M = 2;			//The number of men
const int W = 2;			//The number of women
const int X = 2;			//The number of semaphores. You might want to add some
const int Globals = 0; // Semaphore 0
//const int Men_guard = 0;			//Semaphore number 0 is named Men_guard
//const int Women_guard = 1;			//Semaphore number 1 is named Women_guard

int[0,1] sem[X] = { 1, 1 };		//Make sure to initialize the semaphores correct
int[0,1] ready[M+W];			//ready[i]==0 implies that process i is blocked
int[0,M+W] ID;				//Global variable used to communicate process id to semaphore

urgent chan P[X];			//Channels used to invoke a semaphore P() operation
urgent chan V[X];			//Channels used to invoke a semaphore V() operation
urgent chan Go;				//Channel used on all transitions with no other syncronization. Implementing progression

int Men_in_Bathroom = 0;
int Women_in_Bathroom = 0;
int Bathroom_limit = 1;</declaration><template><name x="5" y="5">Semaphore</name><parameter>const int s</parameter><declaration>//Insert local declarations of clocks, variables and constants.
int[0,M+W] Blocked = 0;         		//Number of processes currently blocked on this semaphore
int[0,M+W+1] Queue[M+W];			//FOFO queue of blocked processes
int[0,M+W+1] pid;				//Identity of process to be blocked or released
int[0,M+W] i;					//Iterator used for shifting the queue</declaration><location id="id0" x="312" y="176"></location><location id="id1" x="416" y="312"><committed/></location><location id="id2" x="416" y="456"><committed/></location><location id="id3" x="520" y="176"><committed/></location><location id="id4" x="712" y="176"><committed/></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="392" y="232">P[s]?</label><label kind="assignment" x="392" y="248">pid = ID,
ready[pid] = 0,
ID = 0</label></transition><transition><source ref="id1"/><target ref="id0"/><label kind="guard" x="224" y="248">Blocked == 0 &amp;&amp;
sem[s]&gt;0</label><label kind="assignment" x="224" y="280">sem[s]--,
ready[pid] = 1</label><nail x="312" y="312"/></transition><transition><source ref="id1"/><target ref="id2"/><label kind="guard" x="400" y="360">sem[s]==0</label></transition><transition><source ref="id2"/><target ref="id0"/><label kind="assignment" x="200" y="464">Queue[Blocked] = pid,
Blocked++</label><nail x="200" y="456"/><nail x="200" y="176"/></transition><transition><source ref="id0"/><target ref="id3"/><label kind="synchronisation" x="392" y="176">V[s] ?</label></transition><transition><source ref="id3"/><target ref="id0"/><label kind="guard" x="360" y="112">Blocked==0</label><label kind="assignment" x="360" y="128">sem[s]++</label><nail x="520" y="88"/></transition><transition><source ref="id3"/><target ref="id4"/><label kind="guard" x="552" y="152">Blocked &gt; 0</label><label kind="assignment" x="552" y="184">pid = Queue[0],
ready[pid] = 1,
Blocked--,
pid = 0</label></transition><transition><source ref="id4"/><target ref="id4"/><label kind="guard" x="768" y="160">i &lt;= Blocked</label><label kind="assignment" x="768" y="176">Queue[i] = Queue[i+1],
i++</label><nail x="784" y="144"/><nail x="784" y="232"/></transition><transition><source ref="id4"/><target ref="id0"/><label kind="guard" x="416" y="8">i &gt; Blocked</label><label kind="assignment" x="416" y="32">i = 0</label><nail x="712" y="32"/><nail x="312" y="32"/></transition></template><template><name x="5" y="5">Hurry</name><location id="id5" x="312" y="208"></location><init ref="id5"/><transition><source ref="id5"/><target ref="id5"/><label kind="synchronisation" x="376" y="200">Go!</label><nail x="368" y="184"/><nail x="368" y="240"/></transition></template><template><name x="5" y="5">Man</name><parameter>const int id</parameter><location id="id6" x="112" y="24"></location><location id="id7" x="-128" y="-200"></location><location id="id8" x="24" y="-96"><name x="8" y="-88">Wait</name></location><location id="id9" x="208" y="-112"></location><location id="id10" x="-128" y="-256"><name x="-152" y="-288">Start</name></location><location id="id11" x="24" y="-200"></location><location id="id12" x="216" y="-8"><name x="232" y="-16">inCS</name></location><init ref="id10"/><transition><source ref="id6"/><target ref="id8"/><label kind="synchronisation" x="72" y="-48">V[Globals]!</label></transition><transition><source ref="id12"/><target ref="id6"/><label kind="synchronisation" x="136" y="24">P[Globals]!</label><label kind="assignment" x="136" y="39">--Men_in_Bathroom</label></transition><transition><source ref="id10"/><target ref="id7"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="-120" y="-120">Go?</label><nail x="-128" y="-96"/></transition><transition><source ref="id11"/><target ref="id8"/><label kind="guard" x="32" y="-167">Women_in_Bathroom &gt; 0 || Men_in_Bathroom == Bathroom_limit</label><label kind="synchronisation" x="32" y="-152">V[Globals]!</label></transition><transition><source ref="id9"/><target ref="id12"/><label kind="synchronisation" x="224" y="-80">V[Globals]!</label></transition><transition><source ref="id7"/><target ref="id11"/><label kind="synchronisation" x="-88" y="-240">P[Globals]!</label><label kind="assignment" x="-88" y="-224">ID = id</label><nail x="-40" y="-200"/></transition><transition><source ref="id11"/><target ref="id9"/><label kind="guard" x="48" y="-256">Women_in_Bathroom == 0 &amp;&amp; Men_in_Bathroom &lt; Bathroom_limit</label><label kind="synchronisation" x="48" y="-240">Go?</label><label kind="assignment" x="48" y="-224">++Men_in_Bathroom</label><nail x="472" y="-176"/><nail x="472" y="-136"/></transition></template><template><name x="8" y="8">Woman</name><parameter>const int id</parameter><location id="id13" x="-40" y="-176"><name x="-56" y="-160">Wait</name></location><location id="id14" x="16" y="-88"></location><location id="id15" x="184" y="-72"><name x="200" y="-80">inCS</name></location><location id="id16" x="184" y="-176"></location><location id="id17" x="-40" y="-280"></location><location id="id18" x="-160" y="-280"></location><location id="id19" x="-160" y="-336"><name x="-184" y="-368">Start</name></location><init ref="id19"/><transition><source ref="id13"/><target ref="id18"/><label kind="synchronisation" x="-152" y="-200">Go?</label><nail x="-160" y="-176"/></transition><transition><source ref="id17"/><target ref="id13"/><label kind="guard" x="-32" y="-256">Men_in_Bathroom &gt; 0 || Women_in_Bathroom == Bathroom_limit</label><label kind="synchronisation" x="-32" y="-240">V[Globals]!</label></transition><transition><source ref="id14"/><target ref="id13"/><label kind="synchronisation" x="-16" y="-176">V[Globals]!</label></transition><transition><source ref="id15"/><target ref="id14"/><label kind="synchronisation" x="32" y="-72">P[Globals]!</label><label kind="assignment" x="32" y="-56">--Women_in_Bathroom</label></transition><transition><source ref="id16"/><target ref="id15"/><label kind="synchronisation" x="192" y="-136">V[Globals]!</label></transition><transition><source ref="id17"/><target ref="id16"/><label kind="guard" x="-8" y="-336">Men_in_Bathroom == 0 &amp;&amp; Women_in_Bathroom &lt; Bathroom_limit</label><label kind="synchronisation" x="-8" y="-320">Go?</label><label kind="assignment" x="-8" y="-304">++Women_in_Bathroom</label><nail x="400" y="-264"/><nail x="392" y="-224"/></transition><transition><source ref="id18"/><target ref="id17"/><label kind="synchronisation" x="-136" y="-304">P[Globals]!</label></transition><transition><source ref="id19"/><target ref="id18"/></transition></template><system>//Insert process assignments.
//SEM_0 = Semaphore ( Men_guard );		//Add necessary semaphores and processes
//SEM_1 = Semaphore ( Women_guard );
M1 = Man ( 0 ); 
M2 = Man ( 1 ); 
W1 = Woman ( 2 );
W2 = Woman ( 3 );
G = Hurry ();

SEM_0 = Semaphore ( Globals );

//Edit system definition.
system SEM_0, M1, M2, W1, W2, G;	//Add semaphores and processes as needed</system></nta>